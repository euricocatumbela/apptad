{"version":3,"sources":["webpack:///./node_modules/@aws-amplify/ui-components/dist/esm-es5/amplify-form-field_4.entry.js"],"names":["AmplifyFormField","hostRef","this","type","required","placeholder","prototype","render","class","label","htmlFor","fieldId","description","id","name","handleInputChange","value","inputProps","disabled","hint","style","AmplifyHint","AmplifyInput","formSubmit","handleKeyDown","ev","key","emit","_this","Object","assign","onInput","event","AmplifyLabel"],"mappings":"8FAAA,mNAGIA,EAEJ,WACE,SAASA,EAAiBC,GACxB,YAAiBC,KAAMD,GAGvBC,KAAKC,KAAO,OAGZD,KAAKE,UAAW,EAGhBF,KAAKG,YAAc,GA+BrB,OA5BAL,EAAiBM,UAAUC,OAAS,WAClC,OAAO,YAAE,MAAO,CACdC,MAAO,cACNN,KAAKO,OAAS,YAAE,MAAO,CACxBD,MAAO,oBACN,YAAE,gBAAiB,CACpBE,QAASR,KAAKS,SACbT,KAAKO,QAASP,KAAKU,aAAe,YAAE,MAAO,CAC5CC,GAAIX,KAAKS,QAAU,eACnBH,MAAO,yBACP,YAAa,0BACZN,KAAKU,aAAc,YAAE,MAAO,KAAM,YAAE,OAAQ,CAC7CE,KAAM,SACL,YAAE,gBAAiB,CACpBH,QAAST,KAAKS,QACdC,YAAaV,KAAKU,YAClBT,KAAMD,KAAKC,KACXY,kBAAmBb,KAAKa,kBACxBV,YAAaH,KAAKG,YAClBS,KAAMZ,KAAKY,KACXE,MAAOd,KAAKc,MACZC,WAAYf,KAAKe,WACjBC,SAAUhB,KAAKgB,aACXhB,KAAKiB,MAAQ,YAAE,eAAgB,CACnCN,GAAIX,KAAKS,QAAU,SAClBT,KAAKiB,QAGHnB,EA1CT,GA6CAA,EAAiBoB,MAjDS,uSAkD1B,IAEIC,EAEJ,WACE,SAASA,EAAYpB,GACnB,YAAiBC,KAAMD,GASzB,OANAoB,EAAYf,UAAUC,OAAS,WAC7B,OAAO,YAAE,MAAO,CACdC,MAAO,QACN,YAAE,OAAQ,QAGRa,EAXT,GAcAA,EAAYD,MAlBS,mSAmBrB,IAEIE,EAEJ,WACE,SAASA,EAAarB,GACpB,YAAiBC,KAAMD,GAGvBC,KAAKC,KAAO,OAGZD,KAAKa,kBAAoB,aAMzBb,KAAKG,YAAc,GACnBH,KAAKqB,WAAa,YAAYrB,KAAM,aAAc,GA8BpD,OA1BAoB,EAAahB,UAAUkB,cAAgB,SAAUC,GAChC,UAAXA,EAAGC,KACLxB,KAAKqB,WAAWI,KAAKF,IAIzBH,EAAahB,UAAUC,OAAS,WAC9B,IAAIqB,EAAQ1B,KAEZ,OAAO,YAAE,IAAM,CACbM,MAAO,cACN,YAAE,QAASqB,OAAOC,OAAO,CAC1BjB,GAAIX,KAAKS,QACT,mBAAoBT,KAAKS,SAAWT,KAAKU,YAAcV,KAAKS,QAAU,eAAiB,KACvFR,KAAMD,KAAKC,KACX4B,QAAS,SAAiBC,GACxB,OAAOJ,EAAMb,kBAAkBiB,IAEjC3B,YAAaH,KAAKG,YAClBS,KAAMZ,KAAKY,KACXN,MAAO,QACPQ,MAAOd,KAAKc,MACZE,SAAUhB,KAAKgB,UACdhB,KAAKe,eAGHK,EA7CT,GAgDAA,EAAaF,MApDS,mqBAqDtB,IAEIa,EAEJ,WACE,SAASA,EAAahC,GACpB,YAAiBC,KAAMD,GAUzB,OAPAgC,EAAa3B,UAAUC,OAAS,WAC9B,OAAO,YAAE,QAAS,CAChBC,MAAO,QACPE,QAASR,KAAKQ,SACb,YAAE,OAAQ,QAGRuB,EAZT,GAeAA,EAAab,MAnBS","file":"50-ebf2f1effc897aa91c03.js","sourcesContent":["import { r as registerInstance, h, c as createEvent, H as Host } from './index-39969785.js';\nvar amplifyFormFieldCss = \":host{--label-font-size:var(--amplify-text-md);--description-font-size:var(--amplify-text-sm)}.form-field{margin-bottom:15px}.form-field-label{display:block;font-size:var(--label-font-size);padding-bottom:0.5em}.form-field-description{font-size:var(--description-font-size);padding-top:0.5em}\";\n\nvar AmplifyFormField =\n/** @class */\nfunction () {\n  function AmplifyFormField(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The required flag in order to make an input required prior to submitting a form */\n\n    this.required = false;\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n    this.placeholder = '';\n  }\n\n  AmplifyFormField.prototype.render = function () {\n    return h(\"div\", {\n      class: \"form-field\"\n    }, this.label && h(\"div\", {\n      class: \"form-field-label\"\n    }, h(\"amplify-label\", {\n      htmlFor: this.fieldId\n    }, this.label)), this.description && h(\"div\", {\n      id: this.fieldId + \"-description\",\n      class: \"form-field-description\",\n      \"data-test\": \"form-field-description\"\n    }, this.description), h(\"div\", null, h(\"slot\", {\n      name: \"input\"\n    }, h(\"amplify-input\", {\n      fieldId: this.fieldId,\n      description: this.description,\n      type: this.type,\n      handleInputChange: this.handleInputChange,\n      placeholder: this.placeholder,\n      name: this.name,\n      value: this.value,\n      inputProps: this.inputProps,\n      disabled: this.disabled\n    }))), this.hint && h(\"amplify-hint\", {\n      id: this.fieldId + \"-hint\"\n    }, this.hint));\n  };\n\n  return AmplifyFormField;\n}();\n\nAmplifyFormField.style = amplifyFormFieldCss;\nvar amplifyHintCss = \":host{--color:var(--amplify-grey);--font-family:var(--amplify-font-family);--font-size:var(--amplify-text-xs);--font-weight:var(--amplify-font-weight)}.hint{color:var(--color);font-family:var(--font-family);font-weight:var(--font-weight);font-size:var(--font-size);margin-bottom:2.625rem}\";\n\nvar AmplifyHint =\n/** @class */\nfunction () {\n  function AmplifyHint(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyHint.prototype.render = function () {\n    return h(\"div\", {\n      class: \"hint\"\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyHint;\n}();\n\nAmplifyHint.style = amplifyHintCss;\nvar amplifyInputCss = \":host{--color:var(--amplify-secondary-color);--background-color:var(--amplify-secondary-contrast);--border-color:var(--amplify-light-grey);--border-color-focus:var(--amplify-primary-color);--border:1px solid var(--border-color);--margin:0 0 0.625rem 0}.input-host{width:100%}.input{display:block;width:100%;padding:1rem;font-size:var(--amplify-text-sm);color:var(--color);background-color:var(--background-color);background-image:none;border:var(--border);border-radius:3px;-webkit-box-sizing:border-box;box-sizing:border-box;margin:var(--margin);height:3.125rem;line-height:1.1}.input:focus{outline:none;border-color:var(--border-color-focus)}.input:disabled{opacity:0.5}\";\n\nvar AmplifyInput =\n/** @class */\nfunction () {\n  function AmplifyInput(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input type.  Can be any HTML input type. */\n\n    this.type = 'text';\n    /** The callback, called when the input is modified by the user. */\n\n    this.handleInputChange = function () {\n      return void 0;\n    };\n    /** (Optional) The placeholder for the input element.  Using hints is recommended, but placeholders can also be useful to convey information to users. */\n\n\n    this.placeholder = '';\n    this.formSubmit = createEvent(this, \"formSubmit\", 7);\n  } // eslint-disable-next-line\n\n\n  AmplifyInput.prototype.handleKeyDown = function (ev) {\n    if (ev.key === 'Enter') {\n      this.formSubmit.emit(ev);\n    }\n  };\n\n  AmplifyInput.prototype.render = function () {\n    var _this = this;\n\n    return h(Host, {\n      class: \"input-host\"\n    }, h(\"input\", Object.assign({\n      id: this.fieldId,\n      \"aria-describedby\": this.fieldId && this.description ? this.fieldId + \"-description\" : null,\n      type: this.type,\n      onInput: function onInput(event) {\n        return _this.handleInputChange(event);\n      },\n      placeholder: this.placeholder,\n      name: this.name,\n      class: \"input\",\n      value: this.value,\n      disabled: this.disabled\n    }, this.inputProps)));\n  };\n\n  return AmplifyInput;\n}();\n\nAmplifyInput.style = amplifyInputCss;\nvar amplifyLabelCss = \":host{--label-color:var(--amplify-secondary-color)}.label{color:var(--label-color);font-size:var(--amplify-text-sm);margin-bottom:16px}\";\n\nvar AmplifyLabel =\n/** @class */\nfunction () {\n  function AmplifyLabel(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  AmplifyLabel.prototype.render = function () {\n    return h(\"label\", {\n      class: \"label\",\n      htmlFor: this.htmlFor\n    }, h(\"slot\", null));\n  };\n\n  return AmplifyLabel;\n}();\n\nAmplifyLabel.style = amplifyLabelCss;\nexport { AmplifyFormField as amplify_form_field, AmplifyHint as amplify_hint, AmplifyInput as amplify_input, AmplifyLabel as amplify_label };"],"sourceRoot":""}